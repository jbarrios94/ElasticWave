#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jul 13 14:02:25 2022

@author: cbarrios
"""

import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import time

c0 = 2.5                                               # velocity (km/sec) (shear wave)
eps = 0.45                                            # stability limit
b = 1 / (0.31 * (1e3*c0)**0.25)
rho0 = 1/b                                             # density (kg/m**3)
# rho0 = 2500                                             
k0 = rho0*c0**2.                                       # Bulk modulus (K) 

# Initialization of setup
# --------------------------------------------------------------------------
nx  = 201
nz  = 201                                              # number of grid points 
Z0  = rho0*c0                                          # impedance
isx = round(nx/2)
isz = round(nz/2)                                      # source location
f0  = 0.015  
xmax  = 1000.
zmax  = 1000.                                          # in m 
tmax  = 150                                       # simulation time in s
dx = xmax / (nx - 1)                                   # calculate x-space increment (m)
dz = zmax / (nz - 1)                                   # calculate z-space increment (m)
x  = (np.arange(nx)*dx)                                # initialize space coordinates 
z  = (np.arange(nz)*dz)
dt = eps * np.minimum(dx, dz)/(np.max(c0))              # calculate time step from stability criterion(s)
# dt = eps * np.maximum(dx, dz)/(np.max(c0))
nt = round(tmax/dt)                                 

# Source time function
# T0 = 1. / f0                                           # period
# a = 1. / T0                                            # half-width (so called sigma)
# t0 = T0 / dt
# tmp = np.zeros(nt)
# for it in range(nt):
#     t = (it - t0) * dt
#     tmp[it] = -2 * a * t * np.exp(-(a * t) ** 2)       # derivative of Gaussian (so called sigma)
# src = np.zeros(nt)                                     # source
# src[0:len(tmp)] = tmp
# lam = c0 * T0                                          # wavelength

t0 = 1 / f0
time_values = np.arange(nt)*dt
a = 1
r = (np.pi * f0 * (time_values - t0))
src = a * (1-2.*r**2)*np.exp(-r**2)

# Initialization of fields
v = np.zeros((nx, nz))                                       # velocity

u = np.zeros((nx, nz))                                       # velocity

s = np.zeros((nx, nz))                                       # stress

k = np.zeros((nx,nz))                                        # shear modulus
rho = k                                               
rho = rho + rho0
k = k + k0
inicio = time.time()
for it in range (nt):
    #----------------------------------Df2-----------------------------------
    # du = (-u[:-1, :-1] + u[1:, :-1] )/dx
    # dv = (-v[:-1, :-1] + v[:-1, 1:] )/dz
    # s[1:, 1:] = s[1:, 1:] - c0**2 * rho0 * dt * (du + dv)
    # dsx = (-s[:-1, 1:] + s[1:, 1:])/dx
    # dsy = (-s[1:, :-1] + s[1:, 1:] )/dz
    # u[:-1, :-1] = u[:-1, :-1] - dt/rho0 * dsx
    # v[:-1, :-1] = v[:-1, :-1] - dt/rho0 * dsy
    
    # s[isx, isz] = s[isx, isz] + dt * src[it]
    #------------------------------------------------------------------------
    
    #----------------------------------Df4-----------------------------------
    # du = (-0.04166667*u[:-3, :-3] + 1.125 * u[1:-2, :-3] - 1.125 * u[2:-1, :-3] + 0.04166667*u[3:, :-3])/dx
    # dv = (-0.04166667*v[:-3, :-3] + 1.125 * v[:-3, 1:-2] - 1.125 * v[:-3, 2:-1] + 0.04166667*v[:-3, 3:])/dz
    # s[3:, 3:] = s[3:, 3:] - c0**2 * rho0 * dt * (du + dv)
    # dsx = (-0.04166667*s[:-3, 3:] + 1.125 * s[1:-2, 3:] - 1.125 * s[2:-1, 3:] + 0.04166667*s[3:, 3:])/dx
    # dsy = (-0.04166667*s[3:, :-3] + 1.125 * s[3:, 1:-2] - 1.125 * s[3:, 2:-1] + 0.04166667*s[3:, 3:])/dz
    # u[:-3, :-3] = u[:-3, :-3] - dt/rho0 * dsx
    # v[:-3, :-3] = v[:-3, :-3] - dt/rho0 * dsy
    
    # s[isx, isz] = s[isx, isz] + dt * src[it]
    #------------------------------------------------------------------------
    
    #----------------------------------DF8-----------------------------------
    # du = (6.97544643e-04*u[:-7, :-7] - 9.57031250e-03 * u[1:-6, :-7] + 7.97526042e-02 * u[2:-5, :-7] \
    #       -1.19628906e+00*u[3:-4, :-7] + 1.19628906e+00*u[4:-3, :-7] -7.97526042e-02*u[5:-2, :-7]\
    #           + 9.57031250e-03*u[6:-1, :-7] -6.97544643e-04*u[7:, :-7])/dx
    # dv = (6.97544643e-04*v[:-7, :-7] - 9.57031250e-03 * v[:-7, 1:-6] + 7.97526042e-02 * v[:-7, 2:-5] \
    #       -1.19628906e+00*v[:-7, 3:-4] + 1.19628906e+00*v[:-7, 4:-3] -7.97526042e-02*v[:-7, 5:-2]\
    #           + 9.57031250e-03*v[:-7, 6:-1] -6.97544643e-04*v[:-7, 7:])/dz
    # s[7:, 7:] = s[7:, 7:] - c0**2 * rho0 * dt * (du + dv)
    # dsx = (6.97544643e-04*s[:-7, 7:] - 9.57031250e-03 * s[1:-6, 7:] + 7.97526042e-02 * s[2:-5, 7:] \
    #       -1.19628906e+00*s[3:-4, 7:] + 1.19628906e+00*s[4:-3, 7:] -7.97526042e-02*s[5:-2, 7:]\
    #           + 9.57031250e-03*s[6:-1, 7:] -6.97544643e-04*s[7:, 7:])/dx
    # dsy = (6.97544643e-04*s[7:, :-7] - 9.57031250e-03 * s[7:, 1:-6] + 7.97526042e-02 * s[7:, 2:-5] \
    #       -1.19628906e+00*s[7:, 3:-4] + 1.19628906e+00*s[7:, 4:-3] -7.97526042e-02*s[7:, 5:-2]\
    #           + 9.57031250e-03*s[7:, 6:-1] -6.97544643e-04*s[7:, 7:])/dz
    # u[:-7, :-7] = u[:-7, :-7] - dt/rho0 * dsx
    # v[:-7, :-7] = v[:-7, :-7] - dt/rho0 * dsy
    
    # s[isx, isz] = s[isx, isz] + dt * src[it]
    #-------------------------------------------------------------------------
    
    #----------------------------------DF12-----------------------------------
    # du = (2.18478116e-05 * u[:-11, :-11] - 3.59005398e-04*u[1:-10, :-11] + 2.96728952e-03*u[2:-9, :-11] \
    #       -1.74476624e-02 * u[3:-8, :-11] + 9.69314575e-02 * u[4:-7, :-11] - 1.22133636e+00 * u[5:-6, :-11] \
    #        + 1.22133636e+00 * u[6:-5, :-11] -9.69314575e-02 * u[7:-4, :-11] + 1.74476624e-02 * u[8:-3, :-11] \
    #         -2.96728952e-03 * u[9:-2, :-11] + 3.59005398e-04 * u[10:-1, :-11] -2.18478116e-05 * s[11:, :-11])/dx
    # dv = (2.18478116e-05 * v[:-11, :-11] - 3.59005398e-04*v[:-11,1:-10] + 2.96728952e-03*v[:-11,2:-9] \
    #       -1.74476624e-02 * v[:-11,3:-8] + 9.69314575e-02 * v[:-11,4:-7] - 1.22133636e+00 * v[:-11,5:-6] \
    #        + 1.22133636e+00 * v[:-11,6:-5] -9.69314575e-02 * v[:-11,7:-4] + 1.74476624e-02 * v[:-11,8:-3] \
    #         -2.96728952e-03 * v[:-11,9:-2] + 3.59005398e-04 * v[:-11,10:-1] -2.18478116e-05 * v[:-11,11:])/dz
    # s[11:, 11:] = s[11:, 11:] - c0**2 * rho0 * dt * (du + dv)
    # dsx = (2.18478116e-05 * s[:-11, 11:] - 3.59005398e-04*s[1:-10, 11:] + 2.96728952e-03*s[2:-9, 11:] \
    #       -1.74476624e-02 * s[3:-8, 11:] + 9.69314575e-02 * s[4:-7, 11:] - 1.22133636e+00 * s[5:-6, 11:] \
    #        + 1.22133636e+00 * s[6:-5, 11:] -9.69314575e-02 * s[7:-4, 11:] + 1.74476624e-02 * s[8:-3, 11:] \
    #         -2.96728952e-03 * s[9:-2, 11:] + 3.59005398e-04 * s[10:-1, 11:] -2.18478116e-05 * s[11:, 11:])/dx
    # dsy = (2.18478116e-05 * s[11:, :-11] - 3.59005398e-04*s[11:,1:-10] + 2.96728952e-03*s[11:,2:-9] \
    #       -1.74476624e-02 * s[11:,3:-8] + 9.69314575e-02 * s[11:,4:-7] - 1.22133636e+00 * s[11:,5:-6] \
    #        + 1.22133636e+00 * s[11:,6:-5] -9.69314575e-02 * s[11:,7:-4] + 1.74476624e-02 * s[11:,8:-3] \
    #         -2.96728952e-03 * s[11:,9:-2] + 3.59005398e-04 * s[11:,10:-1] -2.18478116e-05 * s[11:,11:])/dz
    # u[:-11, :-11] = u[:-11, :-11] - dt/rho0 * dsx
    # v[:-11, :-11] = v[:-11, :-11] - dt/rho0 * dsy
    
    # s[isx, isz] = s[isx, isz] + dt * src[it]
    #-------------------------------------------------------------------------
    
    
    #----------------------------------DF14-----------------------------------
    du = (-4.23651475e-06 * u[:-13, :-13] + 7.69225034e-05 * u[1:-12, :-13] - 6.89453549e-04 * u[2:-11, :-13] \
         +4.17893273e-03 * u[3:-10, :-13] - 2.04767704e-02 * u[4:-9, :-13] + 1.02383852e-01 * u[5:-8, :-13] \
         -1.22860622e+00 * u[6:-7, :-13] + 1.22860622e+00 * u[7:-6, :-13] - 1.02383852e-01 * u[8:-5, :-13] \
         +2.04767704e-02 * u[9:-4, :-13] -4.17893273e-03 * u[10:-3, :-13] + 6.89453549e-04 * u[11:-2, :-13] \
                            -7.69225034e-05 * u[12:-1, :-13] + 4.23651475e-06 * u[13:, :-13])/dx
    dv = (-4.23651475e-06 * v[:-13, :-13] + 7.69225034e-05 * v[:-13, 1:-12] - 6.89453549e-04 * v[:-13, 2:-11] \
         +4.17893273e-03 * v[:-13, 3:-10] - 2.04767704e-02 * v[:-13, 4:-9] + 1.02383852e-01 * v[:-13, 5:-8] \
         -1.22860622e+00 * v[:-13, 6:-7] + 1.22860622e+00 * v[:-13, 7:-6] - 1.02383852e-01 * v[:-13, 8:-5] \
         +2.04767704e-02 * v[:-13, 9:-4] -4.17893273e-03 * v[:-13, 10:-3] + 6.89453549e-04 * v[:-13, 11:-2] \
         -7.69225034e-05 * v[:-13, 12:-1] + 4.23651475e-06 * v[:-13, 13:])/dz
    s[13:, 13:] = s[13:, 13:] - k[13:, 13:] * dt * (du + dv)
    dsx = (-4.23651475e-06 * s[:-13, 13:] + 7.69225034e-05 * s[1:-12, 13:] - 6.89453549e-04 * s[2:-11, 13:] \
         +4.17893273e-03 * s[3:-10, 13:] - 2.04767704e-02 * s[4:-9, 13:] + 1.02383852e-01 * s[5:-8, 13:] \
         -1.22860622e+00 * s[6:-7, 13:] + 1.22860622e+00 * s[7:-6, 13:] - 1.02383852e-01 * s[8:-5, 13:] \
         +2.04767704e-02 * s[9:-4, 13:] -4.17893273e-03 * s[10:-3, 13:] + 6.89453549e-04 * s[11:-2, 13:] \
                            -7.69225034e-05 * s[12:-1, 13:] + 4.23651475e-06 * s[13:, 13:])/dx
    dsy = (-4.23651475e-06 * s[13:, :-13] + 7.69225034e-05 * s[13:, 1:-12] - 6.89453549e-04 *s[13:, 2:-11] \
         +4.17893273e-03 * s[13:, 3:-10] - 2.04767704e-02 * s[13:, 4:-9] + 1.02383852e-01 * s[13:, 5:-8] \
         -1.22860622e+00 * s[13:, 6:-7] + 1.22860622e+00 * s[13:, 7:-6] - 1.02383852e-01 * s[13:, 8:-5] \
         +2.04767704e-02 * s[13:, 9:-4] -4.17893273e-03 * s[13:, 10:-3] + 6.89453549e-04 * s[13:, 11:-2] \
         -7.69225034e-05 * s[13:, 12:-1] + 4.23651475e-06 * s[13:, 13:])/dz
    u[:-13, :-13] = u[:-13, :-13] - dt/rho[:-13, :-13] * dsx
    v[:-13, :-13] = v[:-13, :-13] - dt/rho[:-13, :-13] * dsy
    
    s[isx, isz] = s[isx, isz] + dt * src[it]
    #-------------------------------------------------------------------------

fin = time.time()
print(fin - inicio)
plt.imshow(s.T, cmap = 'seismic', extent = [0, xmax, zmax, 0])