#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jul 13 14:02:25 2022

@author: cbarrios
"""

import numpy as np
import matplotlib.pyplot as plt
import time
                                       
# Initialization of setup
# --------------------------------------------------------------------------

cfl = 0.5
so = 2
nptx = 350 * 2**0 + 1
nptz = 210 * 2**0 + 1
c = np.ones((nptx + so, nptz + so)) * 1.5
# c[4:-4, 4:-4] = np.load("/home/juan/ElasticWave/Teste_seg_eage/seg_teste5_dx20.npy")
# c[0,:] = c[2,:]; c[-1,:] = c[-3,:]
# c[1,:] = c[2,:]; c[-2,:] = c[-3,:]
# c[:,0] = c[:,2]; c[:,-1] = c[:,-3]
# c[:,1] = c[:,2]; c[:,-2] = c[:,-3]
x0 = 3000
x1 = 10000
compx = (x1 - x0)
hxv = (x1 - x0)/(nptx - 1)
z0 = 0
z1 = 4200
compz = (z1 - z0)
hzv = (z1 - z0)/(nptz - 1)
t0 = 0
tn = 1500
f0 = 0.005
nrec = nptx
nbl = 0

#c = np.transpose(c)
b = 1 / (0.31 * (1e3*c)**0.25)
b[c < 1.51] = 1.0
rho = 1/b
k = c**2 * rho           

dt = cfl * np.minimum(hxv, hzv)/(np.max(c))              
nt = round(tn/dt)                     

t0 = 1 / f0
time_values = np.arange(nt)*dt
a = 1
r = (np.pi * f0 * (time_values - t0))
src = a * (1-2.*r**2)*np.exp(-r**2)

v = np.zeros((nptx + so, nptz + so))                                       
u = np.zeros((nptx + so, nptz + so))                                       
s = np.zeros((nptx + so, nptz + so)) 
dv = v.copy()
du = u.copy()
ds = s.copy()

isx = nptx//2
isz = nptz//3
print(isz)
#isz = np.where(np.linspace(0, 4200, nptz) == 320)[0][0]                                   

inicio = time.time()
for it in range (nt):
    #----------------------------------Df2-----------------------------------
    du = (-u[1:-2, 1:-2] + u[2:-1, 1:-2] )/hxv
    dv = (-v[1:-2, 1:-2] + v[1:-2, 2:-1] )/hzv
    s[2:-1, 2:-1] = s[2:-1, 2:-1] - c[2:-1, 2:-1]**2 * rho[2:-1, 2:-1] * dt * (du + dv)
    #print(c[2:-1, 2:-1].shape)
    dsx = (-s[1:-2, 2:-1] + s[2:-1, 2:-1])/hxv
    dsy = (-s[2:-1, 1:-2] + s[2:-1, 2:-1] )/hzv
    u[1:-2, 1:-2] = u[1:-2, 1:-2] - dt/rho[1:-2, 1:-2] * dsx
    v[1:-2, 1:-2] = v[1:-2, 1:-2] - dt/rho[1:-2, 1:-2] * dsy

    s[isx + so//2, isz + so//2] = s[isx + so//2, isz + so//2] + dt * src[it]/(hxv * hzv)

    u[:so, :] = u[so:2*so, :][::-1, :]
    v[:so, :] = v[so:2*so, :][::-1, :]
    s[:so, :] = -s[so:2*so - 1, :][::-1, :]

    u[-so:, :] = u[-2*so:-so, :][::-1, :]
    v[-so:, :] = v[-2*so:-so, :][::-1, :]
    s[-so, :] = 0
    s[-(so - 1):, :] = -s[-2*so + 1:-so, :][::-1, :]

    u[:, -so:] = u[:, -2*so:-so][:, ::-1]
    v[:, -so:] = v[:, -2*so:-so][:, ::-1]
    s[:, -so] = 0
    s[:, -(so-1):] = -s[:, -2*so + 1:-so][:, ::-1]

    u[:, :so] = u[:, 2:4][:, ::-1]
    v[:, :so] = -v[:, 2:4][:, ::-1]
    s[:, :so] = s[:, so:2*so][:, ::-1]
#----------------------------------Df4-----------------------------------
    # du = (-0.04166667*u[:-3, :-3] + 1.125 * u[1:-2, :-3] - 1.125 * u[2:-1, :-3] + 0.04166667*u[3:, :-3])/hxv
    # dv = (-0.04166667*v[:-3, :-3] + 1.125 * v[:-3, 1:-2] - 1.125 * v[:-3, 2:-1] + 0.04166667*v[:-3, 3:])/hzv
    # s[3:, 3:] = s[3:, 3:] - k * dt * (du + dv)
    # dsx = (-0.04166667*s[:-3, 3:] + 1.125 * s[1:-2, 3:] - 1.125 * s[2:-1, 3:] + 0.04166667*s[3:, 3:])/hxv
    # dsy = (-0.04166667*s[3:, :-3] + 1.125 * s[3:, 1:-2] - 1.125 * s[3:, 2:-1] + 0.04166667*s[3:, 3:])/hzv
    # u[:-3, :-3] = u[:-3, :-3] - dt/rho * dsx
    # v[:-3, :-3] = v[:-3, :-3] - dt/rho * dsy
    
    # s[isx, isz] = s[isx, isz] + dt * src[it]
    #------------------------------------------------------------------------

    #------------------------------------------------------------------------
    #----------------------------------DF8-----------------------------------
    
    # du = (6.97544643e-04*u[:-7, :-7] - 9.57031250e-03 * u[1:-6, :-7] + 7.97526042e-02 * u[2:-5, :-7] \
    #       -1.19628906e+00*u[3:-4, :-7] + 1.19628906e+00*u[4:-3, :-7] -7.97526042e-02*u[5:-2, :-7]\
    #           + 9.57031250e-03*u[6:-1, :-7] -6.97544643e-04*u[7:, :-7])/hxv
    # dv = (6.97544643e-04*v[:-7, :-7] - 9.57031250e-03 * v[:-7, 1:-6] + 7.97526042e-02 * v[:-7, 2:-5] \
    #       -1.19628906e+00*v[:-7, 3:-4] + 1.19628906e+00*v[:-7, 4:-3] -7.97526042e-02*v[:-7, 5:-2]\
    #           + 9.57031250e-03*v[:-7, 6:-1] -6.97544643e-04*v[:-7, 7:])/hzv
    # s[7:, 7:] = s[7:, 7:] - k[7:, 7:] * dt * (du + dv)

    # dsx = (6.97544643e-04*s[:-7, 7:] - 9.57031250e-03 * s[1:-6, 7:] + 7.97526042e-02 * s[2:-5, 7:] \
    #       -1.19628906e+00*s[3:-4, 7:] + 1.19628906e+00*s[4:-3, 7:] -7.97526042e-02*s[5:-2, 7:]\
    #           + 9.57031250e-03*s[6:-1, 7:] -6.97544643e-04*s[7:, 7:])/hxv
    # dsy = (6.97544643e-04*s[7:, :-7] - 9.57031250e-03 * s[7:, 1:-6] + 7.97526042e-02 * s[7:, 2:-5] \
    #       -1.19628906e+00*s[7:, 3:-4] + 1.19628906e+00*s[7:, 4:-3] -7.97526042e-02*s[7:, 5:-2]\
    #           + 9.57031250e-03*s[7:, 6:-1] -6.97544643e-04*s[7:, 7:])/hzv
    # u[:-7, :-7] = u[:-7, :-7] - dt/rho[:-7, :-7] * dsx
    # v[:-7, :-7] = v[:-7, :-7] - dt/rho[:-7, :-7] * dsy
    
    # s[isx + 8, isz + 8] = s[isx + 8, isz + 8] + dt * src[it]/(k[isx + 8, isz + 8] * hxv * hzv)

    # # u[:4, :] = u[4:8, :][::-1, :]
    # # v[:4, :] = v[4:8, :][::-1, :]
    # # u[-4:, :] = u[-8:-4, :][::-1, :]
    # # v[-4:, :] = v[-8:-4, :][::-1, :]
    # # u[:, -4:] = u[:, -8:-4][:, ::-1]
    # # v[:, -4:] = v[:, -8:-4][:, ::-1]
    # u[:, :4] = u[:, 4:8][:, ::-1]
    # v[:, :4] = v[:, 4:8][:, ::-1]

    
    # # s[:3, :] = -s[4:8, :][::-1, :]
    # # s[-3:, :] = -s[-8:-4, :][::-1, :]
    # # s[:, -3:] = -s[:, -8:-4][:, ::-1]
    # s[:, 3] = 0
    # s[:, :3] = -s[:, 4:7][:, ::-1]
    
    #-------------------------------------------------------------------------
    
    #----------------------------------DF12-----------------------------------
    # du = (2.18478116e-05 * u[:-11, :-11] - 3.59005398e-04*u[1:-10, :-11] + 2.96728952e-03*u[2:-9, :-11] \
    #       -1.74476624e-02 * u[3:-8, :-11] + 9.69314575e-02 * u[4:-7, :-11] - 1.22133636e+00 * u[5:-6, :-11] \
    #         + 1.22133636e+00 * u[6:-5, :-11] -9.69314575e-02 * u[7:-4, :-11] + 1.74476624e-02 * u[8:-3, :-11] \
    #         -2.96728952e-03 * u[9:-2, :-11] + 3.59005398e-04 * u[10:-1, :-11] -2.18478116e-05 * s[11:, :-11])/dx
    # dv = (2.18478116e-05 * v[:-11, :-11] - 3.59005398e-04*v[:-11,1:-10] + 2.96728952e-03*v[:-11,2:-9] \
    #       -1.74476624e-02 * v[:-11,3:-8] + 9.69314575e-02 * v[:-11,4:-7] - 1.22133636e+00 * v[:-11,5:-6] \
    #         + 1.22133636e+00 * v[:-11,6:-5] -9.69314575e-02 * v[:-11,7:-4] + 1.74476624e-02 * v[:-11,8:-3] \
    #         -2.96728952e-03 * v[:-11,9:-2] + 3.59005398e-04 * v[:-11,10:-1] -2.18478116e-05 * v[:-11,11:])/dz
    # s[11:, 11:] = s[11:, 11:] - c0**2 * rho0 * dt * (du + dv)
    # dsx = (2.18478116e-05 * s[:-11, 11:] - 3.59005398e-04*s[1:-10, 11:] + 2.96728952e-03*s[2:-9, 11:] \
    #       -1.74476624e-02 * s[3:-8, 11:] + 9.69314575e-02 * s[4:-7, 11:] - 1.22133636e+00 * s[5:-6, 11:] \
    #         + 1.22133636e+00 * s[6:-5, 11:] -9.69314575e-02 * s[7:-4, 11:] + 1.74476624e-02 * s[8:-3, 11:] \
    #         -2.96728952e-03 * s[9:-2, 11:] + 3.59005398e-04 * s[10:-1, 11:] -2.18478116e-05 * s[11:, 11:])/dx
    # dsy = (2.18478116e-05 * s[11:, :-11] - 3.59005398e-04*s[11:,1:-10] + 2.96728952e-03*s[11:,2:-9] \
    #       -1.74476624e-02 * s[11:,3:-8] + 9.69314575e-02 * s[11:,4:-7] - 1.22133636e+00 * s[11:,5:-6] \
    #         + 1.22133636e+00 * s[11:,6:-5] -9.69314575e-02 * s[11:,7:-4] + 1.74476624e-02 * s[11:,8:-3] \
    #         -2.96728952e-03 * s[11:,9:-2] + 3.59005398e-04 * s[11:,10:-1] -2.18478116e-05 * s[11:,11:])/dz
    # u[:-11, :-11] = u[:-11, :-11] - dt/rho0 * dsx
    # v[:-11, :-11] = v[:-11, :-11] - dt/rho0 * dsy
    
    # s[isx, isz] = s[isx, isz] + dt * src[it]
    #-------------------------------------------------------------------------
    
    
    #----------------------------------DF14-----------------------------------
#     du = (-4.23651475e-06 * u[:-13, :-13] + 7.69225034e-05 * u[1:-12, :-13] - 6.89453549e-04 * u[2:-11, :-13] \
#           +4.17893273e-03 * u[3:-10, :-13] - 2.04767704e-02 * u[4:-9, :-13] + 1.02383852e-01 * u[5:-8, :-13] \
#           -1.22860622e+00 * u[6:-7, :-13] + 1.22860622e+00 * u[7:-6, :-13] - 1.02383852e-01 * u[8:-5, :-13] \
#           +2.04767704e-02 * u[9:-4, :-13] -4.17893273e-03 * u[10:-3, :-13] + 6.89453549e-04 * u[11:-2, :-13] \
#                             -7.69225034e-05 * u[12:-1, :-13] + 4.23651475e-06 * u[13:, :-13])/hxv
#     dv = (-4.23651475e-06 * v[:-13, :-13] + 7.69225034e-05 * v[:-13, 1:-12] - 6.89453549e-04 * v[:-13, 2:-11] \
#           +4.17893273e-03 * v[:-13, 3:-10] - 2.04767704e-02 * v[:-13, 4:-9] + 1.02383852e-01 * v[:-13, 5:-8] \
#           -1.22860622e+00 * v[:-13, 6:-7] + 1.22860622e+00 * v[:-13, 7:-6] - 1.02383852e-01 * v[:-13, 8:-5] \
#           +2.04767704e-02 * v[:-13, 9:-4] -4.17893273e-03 * v[:-13, 10:-3] + 6.89453549e-04 * v[:-13, 11:-2] \
#           -7.69225034e-05 * v[:-13, 12:-1] + 4.23651475e-06 * v[:-13, 13:])/hzv
#     s[13:, 13:] = s[13:, 13:] - k[13:, 13:] * dt * (du + dv)
#     dsx = (-4.23651475e-06 * s[:-13, 13:] + 7.69225034e-05 * s[1:-12, 13:] - 6.89453549e-04 * s[2:-11, 13:] \
#           +4.17893273e-03 * s[3:-10, 13:] - 2.04767704e-02 * s[4:-9, 13:] + 1.02383852e-01 * s[5:-8, 13:] \
#           -1.22860622e+00 * s[6:-7, 13:] + 1.22860622e+00 * s[7:-6, 13:] - 1.02383852e-01 * s[8:-5, 13:] \
#           +2.04767704e-02 * s[9:-4, 13:] -4.17893273e-03 * s[10:-3, 13:] + 6.89453549e-04 * s[11:-2, 13:] \
#                             -7.69225034e-05 * s[12:-1, 13:] + 4.23651475e-06 * s[13:, 13:])/hxv
#     dsy = (-4.23651475e-06 * s[13:, :-13] + 7.69225034e-05 * s[13:, 1:-12] - 6.89453549e-04 *s[13:, 2:-11] \
#           +4.17893273e-03 * s[13:, 3:-10] - 2.04767704e-02 * s[13:, 4:-9] + 1.02383852e-01 * s[13:, 5:-8] \
#           -1.22860622e+00 * s[13:, 6:-7] + 1.22860622e+00 * s[13:, 7:-6] - 1.02383852e-01 * s[13:, 8:-5] \
#           +2.04767704e-02 * s[13:, 9:-4] -4.17893273e-03 * s[13:, 10:-3] + 6.89453549e-04 * s[13:, 11:-2] \
#           -7.69225034e-05 * s[13:, 12:-1] + 4.23651475e-06 * s[13:, 13:])/hzv
#     u[:-13, :-13] = u[:-13, :-13] - dt/rho[:-13, :-13] * dsx
#     v[:-13, :-13] = v[:-13, :-13] - dt/rho[:-13, :-13] * dsy
    
#     s[isx + 7 , isz + 7] = s[isx + 7, isz + 7] + dt * src[it]
    #-------------------------------------------------------------------------

fin = time.time()
s = s[2:-2, 2:-2].T
print(fin - inicio)
plt.imshow(s, cmap = 'seismic', extent = [x0, x1, z1, z0])
print(np.max(s[:, 180]))
plt.figure()
plt.plot(s[:, 180])
plt.show()